// 配列の宣言と値の代入を行う
const userNames = ['侍太郎', '侍一郎', '侍二郎', '侍三郎', '侍四郎'];

// 配列の値を出力する
console.log(userNames);

// 2番目の要素を更新する
userNames[1] = '侍花子';

// 6番目に要素を追加する
userNames[5] = '侍五郎';

// 配列の値を出力する
console.log(userNames);

 // 3番目の要素を出力する
 console.log(userNames[2]);

//  5章の章末でもお伝えしたとおり、「予期せぬ動作を防げる」というメリットがとても大きいので、JavaScriptでは基本的に定数（const）を使うのが一般的です。

// しかし、配列では要素を更新したり追加したりするのに、なぜletではなくconstを使うのか、疑問に思った方もいるかもしれません。

// let：変数を宣言するときに使う。あとから中身を入れ替えられる（再代入できる）
// const：定数を宣言するときに使う。あとから中身を入れ替えられない（再代入できない）

// constで定数を宣言したとしても、以下のように配列の要素を更新したり、追加したりすることはできます。なぜなら、要素の更新や追加は再代入にあたらないためです。
// 配列の宣言と値の代入を行う

// const userNames = ['侍太郎', '侍一郎', '侍二郎', '侍三郎', '侍四郎'];

// 2番目の要素を更新する
// userNames[1] = '侍花子';

// 6番目に要素を追加する
// userNames[5] = '侍五郎';



// ただし以下のように、値を再代入する（丸ごと入れ替える）とエラーが発生します。
// 配列の宣言と値の代入を行う
// const userNames = ['侍太郎', '侍一郎', '侍二郎', '侍三郎', '侍四郎'];
// 値を再代入する（丸ごと入れ替える）とエラーが発生する userNames = ['侍花子', '侍一子'];


// 「配列を宣言するときは基本的にconstを使う」
// 配列の要素数を数えるには、lengthプロパティを使います。lengthプロパティは、文字列の文字数や配列の要素数を取得するプロパティです。
// 配列の宣言と値の代入を行う
// const userNames = ['侍太郎', '侍一郎', '侍二郎', '侍三郎', '侍四郎'];

// 配列の要素数を出力
// console.log(userNames.length);