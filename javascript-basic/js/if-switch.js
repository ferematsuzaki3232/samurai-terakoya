// 算術演算子を使った場合の戻り値を出力する
console.log(45 + 18);

// 比較演算子を使った場合の戻り値を出力する
console.log(45 > 18);

// 等価演算子を使った場合の戻り値を出力する
console.log('5' == 5);

// 厳密等価演算子を使った場合の戻り値を出力する
console.log('5' === 5);




// 1. ifのみを記述するパターン（もし○○であれば、●●する）

// ↓デベロッパーツールを更新し続けると４、「大当たり」が出てくる。
// 変数numに0～4までのランダムな整数を代入する
let num = Math.floor(Math.random() * 5);

// 変数numの値を出力する（確認用）
console.log(num);

// if (条件式) {
//   条件が成り立つときの処理
// }
// else {
//   条件が成り立たないときの処理
// }

// 変数numの値が4であれば、「大当たりです」という文字列を出力する if➡else if➡elseの順番で書く
if (num === 4){
  console.log('大当たりです');
}

// 変数numの値が3であれば、「当たりです」という文字列を出力する↓
else if (num === 3) {
  console.log('当たりです');
}

// 2. ifとelseを記述するパターン（もし○○であれば●●し、それ以外であれば▲▲する）

// それ以外のときは、「はずれです」という文字列を出力する
else{
  console.log('はずれです');
}

// 3. if、else if、elseを記述するパターン（もし○○であれば●●し、そうでなくて□□であれば■■し、それ以外であれば▲▲する）

// if (条件式A) {
//   条件Aが成り立つときの処理
// }
// else if (条件式B) {
//   条件Bが成り立つときの処理  
// }
// else {
//   どの条件も成り立たないときの処理
// }



// 7.6 「かつ」「または」で複数の条件式を組み合わせる方法

// num = 20;

// &&（かつ）を記述して、すべての条件が成り立つ場合にのみ処理を行う（変数numの値が11～29）
// if(num > 10 && num < 30){
//   console.log('変数numは10より大きく、30より小さいです');
// } else{
//   console.log('条件が成り立ちませんでした');
// }

// num = 30;

// ||（または）を記述して、1つでも条件が成り立てば処理を行う（変数numの値が10または30）
// if (num === 10 || num === 30){
//   console.log('変数numは10または30です');
// }else{
//   console.log('条件が成り立ちませんでした');
// }



// 8.3 switch文の書き方↓
// switch (式) {
//   case 値1:
//     式が値1のときの処理
//     break;
//   case 値2:
//     式が値2のときの処理
//     break;
//   case 値3:
//     式が値3のときの処理
//     break;
// }


// 1. caseのみを記述するパターン（値が○○のときは●●し、□□のときは■■する）


// 変数numに0～4までのランダムな整数を代入する
num = Math.floor(Math.random() * 5);

// 変数numの値を出力する（確認用）
console.log(num);

// 変数numの値によって、出力する文字列を切り替える
switch (num){
  case 2:
    console.log('小吉です');
    break;
  case 3:
    console.log('中吉です');
    break;
  case 4:
    console.log('大吉です');
    break;
  default:
    console.log('末吉です');
    break;
}

// 2. caseとdefaultを記述するパターン（値が○○のときは●●し、□□のときは■■し、それ以外のときは▲▲する）

// switch (式) {
//   case 値1:
//     式が値1のときの処理
//     break;
//   case 値2:
//     式が値2のときの処理
//     break;
//   case 値3:
//     式が値3のときの処理
//     break;
//   default:
//     式がいずれのcaseにも当てはまらないときの処理
//     break;
// }

// では、break;を記述しなければどうなるか実際に確かめてみましょう。最初に値が一致したcase以降の処理がすべて実行されてしまいます。